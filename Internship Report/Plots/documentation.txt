current = FX_ROS.Get_FK(joints=FX_ROS.Get_joitns()).position
#print(current)
count = 0
Errors = {'x': [], 'y': [], 'z': []}
check1 = 1
check2 = 1
FX_ROS.Move_to_pose(pour0)

while (abs(current.x - pour0[0]) >= 0.001) or (abs(current.y - pour0[1]) >= 0.001) or (abs(current.z - pour0[2]) >= 0.002):

    if count >= 100:
        break
    
    Errors['x'].append(abs(current.x - pour0[0]))
    Errors['y'].append(abs(current.y - pour0[1]))
    Errors['z'].append(abs(current.z - pour0[2]))

    count += 1

    if (abs(current.x - pour0[0]) >= 0.001) and check1:
        FX_ROS.Move_pose_axis('x', new=pour0[0])
    
    if (abs(current.y - pour0[1]) >= 0.001) and (abs(current.x - pour0[0]) <= 0.001) and check2:
        FX_ROS.Move_pose_axis('y', new=pour0[1])
        check1 = 0
    
    if (abs(current.z - pour0[2]) >= 0.001):
        FX_ROS.Move_pose_axis('z', new=pour0[2])
        check2 = 0

    current = FX_ROS.Get_FK(joints=FX_ROS.Get_joitns()).position

    print('Trial number number {} and the current values are: \n{}'.format(count, current))
    if (abs(current.x - pour0[0]) <= 0.001) and (abs(current.y - pour0[1]) <= 0.001) and (abs(current.z - pour0[2]) <= 0.001):
        print("\n\n Done, there are the current values: {}".format(current))
